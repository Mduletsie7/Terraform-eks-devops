name: Kryptic-Terraform-EKS-DevOps
on:
  push:
    branches: [develop]

env:
  ECR_REPO: "865494649634.dkr.ecr.us-east-1.amazonaws.com/kryptic-ecr-repo-dev"
  EKS_CLUSTER: "kryptic-eks-cluster-dev"
  AWS_REGION: "us-east-1"

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Login to ECR
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Build Docker Image
      id: build
      run: |
        cd application
        docker build -t ${ECR_REPO}:${{ github.sha }} .
        echo "image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT

  codeql-analysis:
    name: CodeQL Analysis
    needs: build
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: 'javascript' # Change to your language (python, java, etc.)
        queries: security-extended
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:javascript"

  scan:
    name: Container Security Scan
    needs: build
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy Scan
      uses: aquasecurity/trivy-action@v0.14
      with:
        image-ref: '${{ env.ECR_REPO }}:${{ needs.build.outputs.image_tag }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'
    
    - name: Upload SARIF Report
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy to EKS
    needs: [build, codeql-analysis, scan]
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Kubernetes Tools
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}
    
    - name: Deploy Monitoring Stack
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
          --namespace monitoring \
          --create-namespace \
          --set prometheus.prometheusSpec.resources.requests.cpu="500m" \
          --set prometheus.prometheusSpec.resources.requests.memory="2Gi" \
          --atomic --timeout 10m
    
    - name: Deploy Application
      run: |
        sed -i "s|IMAGE_TAG|${{ needs.build.outputs.image_tag }}|g" infrastructure/k8s/deployment.yaml
        kubectl apply -f infrastructure/k8s/
        kubectl rollout status deployment/kryptic-eks-dev -n default --timeout=300s
        kubectl get svc kryptic-eks-dev-service -n default